1)
A    B   or  nor
1    1   1    0
1    0   1    0
0    1   1    0
0    0   0    1


_
A = A -       _
        nor = A
    A -
       ______    _     _
nor = (A or B) = A and B

A and B = A -         _
              nor  -  A  -         _____
          A -                      _    _
                            nor - (A or B) = A and B
          B -         _ 
              nor  -  B  -
          B -


A or B = A -         _     _
             nor -   A and B   -         ______
         B -                             _     _
                                  nor - (A and B) = A or B
         A -         _     _
            nor -    A and B   -
         B -


2) imagem

3) a) 1 - (T/t) = 1 - [(0,2 * 0,3)t + 0,3t + 0,5t]/t = 1 -  [0,06t + 0,8t]/t = 1 - 0,86 = 0,14
   b) 1 - (T/t) = 1 - [0,2t + (0,3 * 0,1)t + 0,5t]/t = 1 - [0,03t + 0,7t]/t = 1 - 0,73 = 0,27
   c) 1 - (T/t) = 1 - [0,2t + 0,3t + (0,5 * 0,55)t]/t = 1 - [0,5t + 0,275t]/t = 1 - 0,775 = 0,225
   d) 1 - (T/t) = 1 - [(0,2 * 0,3)t + (0,3 * 0,1)t + (0,5 * 0,55)t] = 1 - [0,06t + 0,03t + 0,275t]/t = 1 - 0,365 = 0,635

4) add $s1, $s2, $s3: soma os inteiros de dois registradores ($s2 e $s3) e armazena o resultado no registrrador inicial ($s1)
   addi $s1, $s2, 100: soma o inteiro de uma registrador($s2) com um inteiro imediato(100) e armazena o resultado no registrrador inicial ($s1)
   addiu $$s1, $s2, 100: mesmo de addi mas sem overflow
   addu $s1, $s2, $s3: mesmo de add mas sem overflow
   and $s1, $s2, $s3: realiza o teste lógico "and" entre dois registradores ($s2 e $s3), checando bit a bit os dois registradores, e armazena o resultado em $s1
   andi $s1, $s2, 1: realiza o teste lógico entre um registrador ($s2) e um imediato (1), checando bit a bit o registrador e o imediato, e armazena o resultado em $s1
   beq(branch and equal) $s1, $s2, posi: pula para uma posicao (posi) do programa se os dois registradores ($s1 e $s2) forem iguais
   bltz(branch less than zero) $s1, posi: pula para uma posicao (posi) do programa se o registrador for menor que 0
   bne(beanch not equal) $s1, $s2, posi: pula para uma posicao (posi) do programa se os registraores ($s1, $s2) não forem iguais
   div $s1, $s2: divide o primeiro registrador($s1) pelo segundo($s2) e armazena o quociente em lo e o resto em hi
   divu $s1, $s2: divide o primeiro registrador($s1) pelo segundo($s2) e armazena o quociente em lo e o resto em hi. mas sem overflow
   j(jump) posi: pula para uma posicao do programa
   jal(jum and link) posi: pula para uma posicao do programa e linka a posicao em que o programa estava rodando antes do pulo
   jr(jump registrer) jr $s1: pula para o endereco contido no registrador($s1)
   lb(load byte) lb $s1, 100($s1): carrega, no registrador $s1, 100 + $s2
   lbu(load byte unsigned) lbu $s1, 100($s1): carrega, no registrador $s1, 100 + $s2. mas mantendo o sinal positivo
   lui(load upper imediate) lui $s1, 10: carrega, no registrador $s1, o valor do imediato (10(em bianrio)) com 16 zeros à esquerda
   lw(load word) lw $s1, 10($s2): carrega em $s1 a palavra contida em $s2
   mfhi(move from high) mfhi $s1: carrega em $s1 o conteudo de hi
   mflo(move from low) mflo $s1: carrega em $s1 o conteudo de lo
   mult $s1, $s2: multiplica os registradores $s1 e $s2  e armazena metade do resultado(em bits) em hi e metade em lo
   multu $s1, $s2: multiplica os registradores $s1 e $s2  e armazena metade do resultado(em bits) em hi e metade em lo. mas sem tratamento do sinal
   nor(not or) nor $s1, $s2, $s3: realiza a operacao logica not or(bit a bit) entre os dois registradores($s2, $s3) e armazena o resultado em $s1
   or $s1, $s2, $s3: realiza a operacao logica or(bit a bit) entre os dois registradores($s2, $s3) e armazena o resultado em $s1
   ori $s1, $s2, 1: realiza a operacao logica or(bit a bit) entre o registradore $s2 e o imediato e armazena o resultado em $s1
   sb(store byte) sb $s1, 10($s2): o byte menos significativo de $s2 eh carregado em $s1

10) a)
    * hex = 22   bin = 0010 0010
    * 0 + 1*3 + 2*9 + 2*27 + 1*81 + 2*243 + 0*729 + 1*2187
       bin = 0 + 1*11 + 10*1001 + 10*11011 + 1*1010001 + 10*11110011 + 0 + 1*100010001011
       bin = 11 + 10010 + 110110 + 101001 + 111100110 + 100010001011 = 1010 1110 0101
       hex = ae5
    * 1021 2210 2100 1020 = 0 + 2*3 + 0 + 1*27 + 0 + 0 + 1*729 + 2*2187 + 0 + 1*19683 + 2*59049 + 2*177147 + 1*531441 + 2*1594323 + 0 + 14348907
       18.389.058
       hex = 1189842
       bin = 0001 0001 1000 1001 1000 0100 0010
       
    b)
    * 2*1 + 0*5 + 3*25 = 77
      hex = 4d   bin = 0010 1101
    * 5 -> 302 423 = 3*1 + 2*5 + 4*25 + 2*125 + 0*625 + 3*3125 = 113 + 250 + 9375 = 9738
      hex = 260a   bin = 0010 0110 0000 1010
    * 5 -> 302 423 140 = 0*1 + 4*5 + 1*25 + 3*125 + 2*625 + 4*3125 + 2*15625 + 0*78125 + 3*390625
      = 65 + 375 + 1250 + 12400 + 31250 + 0 + 1171875 = 440 + 13650 + 1203125 = 1217215
      hex = 1292bf   bin = 0001 0010 1001 0010 1011 1111

    c)
    * 8 -> 534
      bin = 0001 0101 1100   hex = 15c
    * 8 -> 534 607
      bin = 0010 1011 1001 1000 0111 = hex = 2b987
    * 8 -> 534 607 126 470
      bin = 1010 1110 0110 0001 1100 1010 1100 0111 1000   hex = ae61 cac78

    d)
    * 12
      bin = 1100    hex = c
    * 5655 -> 2827 -> 1413 -> 706 -> 353 -> 176 -> 88 -> 44 -> 22 -> 11 -> 5 -> 2 -> 1 -> 0
      5655 -> 353 -> 22 -> 6
      bin = 0001 0110 0001 0111   hex = 1617
    * 2550276
      2550276 -> 1275138 -> 637569 -> 318784 -> 159392 -> 79696 -> 39848 -> 19924 -> 9962 -> 4981 -> 2480 -> 1245 -> 622 -> 311 -> 155 -> 77 -> 38 -> 19 -> 9 -> 4 -> 2 -> 1
      bin = 0010 0110 1110 1010 0000 0100   hexa = 26ea04
    * 76 545 336
      hex = 48ffd38   bin = 0100 1000 1111 1111 1101 0011 1000
    * 3 726 755
      hex = 38dda3   bin = 0011 1000 1101 1101 1010 0011
      

   e)
   * 12 -> 9a5 = 5*12^0 + 10*12^1 + 9*12^2 = 5 + 120 + 1296 = 1421
     hex = 58d   bin = 0101 1000 1101
   * 12 -> b0a = 10*12^0 + 0*12^1 + 11*12^2 = 10 + 0 + 1584 = 1594
     hex = 63a   bin = 0110 0011 1010
   * 12 -> ba95 = 5*12^0 + 9*12^1 + 10*12^2 + 11*12^3 = 5 + 108 + 1440 + 19008 = 20561
     hex = 5051   bin = 0101 0000 0101 0001
   * 12 -> a55a1 = 1*12^0 + 10*12^1 + 5*12^2 + 5*12^3 + 10*12^4 = 12 + 120 + 720 + 8640 + 207360 = 216852
     hex = 34f14   bin = 0011 0100 1111 0001 0100
   * 12 -> baabaa = 10*12^0 + 10*12^1 + 11*12^2 + 10*12^3 + 10*12^4 + 11*12^5 = 10 + 120 + 1584 + 17280 + 207360 + 2737152 = 2963506
     hex = 2d3832   bin = 0010 1101 0011 1000 0011 0010


11) a)
    * 10,11 = 2,75
    * 1011,0010 = 11,125
    * 10110010,11110001 = 178,94140625
    b)
    * 10,21 = 3,77777...
    * 1021,2210 = 34,92592....